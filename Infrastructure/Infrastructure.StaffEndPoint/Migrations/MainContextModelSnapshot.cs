// <auto-generated />
using System;
using Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.EndPoint.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.ActiveCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActiveCodes");
                });

            modelBuilder.Entity("Core.Entities.BarginCampaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BarginTypeId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RemainedCount")
                        .HasColumnType("int");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BarginTypeId");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("BarginCampaigns");
                });

            modelBuilder.Entity("Core.Entities.BarginType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BarginTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "درصد"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ثابت"
                        });
                });

            modelBuilder.Entity("Core.Entities.BarginUsers", b =>
                {
                    b.Property<Guid>("BarginCampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("BarginCampaignId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarginUsers");
                });

            modelBuilder.Entity("Core.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EndedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("Paid")
                        .HasColumnType("int");

                    b.Property<int>("PeopleCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("PromoterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegisteredTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TableReserveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PromoterId");

                    b.HasIndex("RegisteredTableId");

                    b.HasIndex("TableReserveId");

                    b.HasIndex("UserId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Core.Entities.BillGames", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("From")
                        .HasColumnType("bigint");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<long>("To")
                        .HasColumnType("bigint");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("GameTypeId");

                    b.ToTable("BillGames");
                });

            modelBuilder.Entity("Core.Entities.BillItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ProductId");

                    b.ToTable("BillItems");
                });

            modelBuilder.Entity("Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sede",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shahin Shahr",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Jalal Abad",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ghahdrijan",
                            ProvinceId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Iran"
                        });
                });

            modelBuilder.Entity("Core.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("PushId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Core.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Core.Entities.EntityStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EntityStatuses");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Waiting/Deactivated"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Activated/Submited"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Deleted"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("Core.Entities.EventAndLeague", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEvent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RemainedCount")
                        .HasColumnType("int");

                    b.Property<long>("StartAt")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("EventAndLeagues");
                });

            modelBuilder.Entity("Core.Entities.EventUsers", b =>
                {
                    b.Property<Guid>("EventAndLeagueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventAndLeagueId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUsers");
                });

            modelBuilder.Entity("Core.Entities.GameType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricePerHour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GameTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "بازیهای رومیزی",
                            PricePerHour = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "بازیهای کنسول",
                            PricePerHour = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.GroupGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RemainedCount")
                        .HasColumnType("int");

                    b.Property<long>("StartAt")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("GroupGames");
                });

            modelBuilder.Entity("Core.Entities.GroupGameUsers", b =>
                {
                    b.Property<Guid>("GroupGameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("GroupGameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupGameUsers");
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFromAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Core.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StaffPrice")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b22b8a8-4402-4127-87f2-7e6df18bf0e6"),
                            CreatedAt = 1598264160L,
                            Description = "میان وعده",
                            Name = "میان وعده",
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("18b746d2-7eef-46b6-8ea8-d19de794ed74"),
                            CreatedAt = 1598264160L,
                            Description = "میان وعده 1",
                            Name = "میان وعده 1",
                            ParentId = new Guid("6b22b8a8-4402-4127-87f2-7e6df18bf0e6"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("7e2b0815-956a-432e-b675-21e60f1b1c43"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "میان 1",
                            ParentId = new Guid("18b746d2-7eef-46b6-8ea8-d19de794ed74"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("3fb5d92d-a5a4-44b8-8a3d-83b7688372c8"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "میان 2",
                            ParentId = new Guid("18b746d2-7eef-46b6-8ea8-d19de794ed74"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("2f036ba7-c577-4870-ade8-c5b71bf5378b"),
                            CreatedAt = 1598264160L,
                            Description = "میان وعده 2",
                            Name = "میان وعده 2",
                            ParentId = new Guid("6b22b8a8-4402-4127-87f2-7e6df18bf0e6"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("73c6db7c-858c-42a1-a004-528fc0d41924"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "میان 3",
                            ParentId = new Guid("2f036ba7-c577-4870-ade8-c5b71bf5378b"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("b38671d2-aaec-40b3-bd33-37570b2b0eea"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "میان 4",
                            ParentId = new Guid("2f036ba7-c577-4870-ade8-c5b71bf5378b"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("a2881e4f-43ce-47df-ab15-edb746ef281d"),
                            CreatedAt = 1598264160L,
                            Description = "نوشیدنی سرد",
                            Name = "نوشیدنی سرد",
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("57dda9fa-feb2-46e0-b7c3-a619497f1545"),
                            CreatedAt = 1598264160L,
                            Description = "نوشیدنی سرد 1",
                            Name = "نوشیدنی سرد 1",
                            ParentId = new Guid("a2881e4f-43ce-47df-ab15-edb746ef281d"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("e1fa6eb1-2c9b-4c19-99bd-07655f1eaf04"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "نوش 1",
                            ParentId = new Guid("57dda9fa-feb2-46e0-b7c3-a619497f1545"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("cd9b33b5-881e-4d01-8cb2-67e75436ce36"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "نوش 2",
                            ParentId = new Guid("57dda9fa-feb2-46e0-b7c3-a619497f1545"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("b3215f0c-eb04-4371-b11b-6d554bd7deaa"),
                            CreatedAt = 1598264160L,
                            Description = "نوشیدنی سرد 2",
                            Name = "نوشیدنی سرد 2",
                            ParentId = new Guid("a2881e4f-43ce-47df-ab15-edb746ef281d"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("49f637fb-7434-4429-9a3d-0b061dfd9aee"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "نوش 3",
                            ParentId = new Guid("b3215f0c-eb04-4371-b11b-6d554bd7deaa"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("1f19acd9-54df-4898-9a73-322bb21f0827"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "نوش 4",
                            ParentId = new Guid("b3215f0c-eb04-4371-b11b-6d554bd7deaa"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("d340e0f7-7ebd-4b3f-bc4c-115e224546d1"),
                            CreatedAt = 1598264160L,
                            Description = "سردنوش گیاهی",
                            Name = "سردنوش گیاهی",
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("daf5bb7e-5d45-403f-a120-230bb35928eb"),
                            CreatedAt = 1598264160L,
                            Description = "سردنوش گیاهی 1",
                            Name = "سردنوش گیاهی 1",
                            ParentId = new Guid("d340e0f7-7ebd-4b3f-bc4c-115e224546d1"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("f36da1d0-11f6-4b0a-9bdd-292c4eb056e2"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "سردنوش 1",
                            ParentId = new Guid("daf5bb7e-5d45-403f-a120-230bb35928eb"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("bf856381-349c-41b6-ad9c-e54a2f054447"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "سردنوش 2",
                            ParentId = new Guid("daf5bb7e-5d45-403f-a120-230bb35928eb"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("c056d1cb-d42e-4c66-b430-cbfd4775a842"),
                            CreatedAt = 1598264160L,
                            Description = "سردنوش گیاهی 2",
                            Name = "سردنوش گیاهی 2",
                            ParentId = new Guid("d340e0f7-7ebd-4b3f-bc4c-115e224546d1"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("cfeed39b-c410-4767-927c-1be02c8c9096"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "سردنوش 3",
                            ParentId = new Guid("c056d1cb-d42e-4c66-b430-cbfd4775a842"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("211d7f77-c324-417e-9e73-ba5bcc6c42ff"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "سردوش 4",
                            ParentId = new Guid("c056d1cb-d42e-4c66-b430-cbfd4775a842"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("69eb1978-7fc3-4936-b43b-ca1d3d1d90ad"),
                            CreatedAt = 1598264160L,
                            Description = "نوشیدنی گرم",
                            Name = "نوشیدنی گرم",
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("86e88e9c-3e6c-4bf1-9f27-86fe1550f7cc"),
                            CreatedAt = 1598264160L,
                            Description = "قهوه ها",
                            Name = "قهوه ها",
                            ParentId = new Guid("69eb1978-7fc3-4936-b43b-ca1d3d1d90ad"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("c5ac0554-3e81-4655-97a2-35415a96afe1"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "قهوه 1",
                            ParentId = new Guid("86e88e9c-3e6c-4bf1-9f27-86fe1550f7cc"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("042d0c7c-028d-4a54-be9b-1b019c7b7e27"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "قهوه 2",
                            ParentId = new Guid("86e88e9c-3e6c-4bf1-9f27-86fe1550f7cc"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("b29d2e3f-839f-4666-8da6-fb15dc3e955c"),
                            CreatedAt = 1598264160L,
                            Description = "کاپوچینوها",
                            Name = "کاپوچینوها",
                            ParentId = new Guid("69eb1978-7fc3-4936-b43b-ca1d3d1d90ad"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("cb76002a-43d6-4516-bcb1-d2782ad7c6c0"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "کاپوچینو 1",
                            ParentId = new Guid("b29d2e3f-839f-4666-8da6-fb15dc3e955c"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        },
                        new
                        {
                            Id = new Guid("6bff0dca-8871-44ba-b0ce-fd892c70dce1"),
                            CreatedAt = 1598264160L,
                            Description = "",
                            Name = "کاپوچینو 2",
                            ParentId = new Guid("b29d2e3f-839f-4666-8da6-fb15dc3e955c"),
                            Price = 0,
                            StaffPrice = 0,
                            StatusId = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Core.Entities.ProductRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductRate");
                });

            modelBuilder.Entity("Core.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Isfahan"
                        });
                });

            modelBuilder.Entity("Core.Entities.RegisteredTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("FinishedTime")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("RegisteredTable");
                });

            modelBuilder.Entity("Core.Entities.RegisteredTableUserCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("RegisteredTableUserCount");
                });

            modelBuilder.Entity("Core.Entities.RegisteredWorkTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("Date")
                        .HasColumnType("bigint");

                    b.Property<double>("Hour")
                        .HasColumnType("float");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RegisteredWorkTime");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Accountant"
                        });
                });

            modelBuilder.Entity("Core.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "سقف خرید پرسنل",
                            Name = "MaxStaffBying",
                            Value = "50000"
                        },
                        new
                        {
                            Id = 2,
                            Description = "هزینه ساخت تیم",
                            Name = "TeamPrice",
                            Value = "50000"
                        });
                });

            modelBuilder.Entity("Core.Entities.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Slider");
                });

            modelBuilder.Entity("Core.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsForGame")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("No")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityStatusId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Core.Entities.TableMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("TableMessage");
                });

            modelBuilder.Entity("Core.Entities.TableReserve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("Time")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("TableReserve");
                });

            modelBuilder.Entity("Core.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("Date")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Remained")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Core.Entities.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMember");
                });

            modelBuilder.Entity("Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Authority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NextUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("NextUserId");

                    b.HasIndex("TransactionCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Core.Entities.TransactionCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "پرداخت"
                        },
                        new
                        {
                            Id = 2,
                            Name = "دریافت"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ارسال"
                        },
                        new
                        {
                            Id = 4,
                            Name = "واریز از درگاه"
                        },
                        new
                        {
                            Id = 5,
                            Name = "نقدی"
                        },
                        new
                        {
                            Id = 6,
                            Name = "افزایش اعتبار روزانه"
                        },
                        new
                        {
                            Id = 7,
                            Name = "کاهش اعتبار روزانه"
                        },
                        new
                        {
                            Id = 8,
                            Name = "حقوق"
                        });
                });

            modelBuilder.Entity("Core.Entities.Update", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Restricted")
                        .HasColumnType("bit");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Updates");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Birthday")
                        .HasColumnType("bigint");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProfileImageId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8114eb2e-3588-4239-98a4-f7e3023674e8"),
                            CreatedAt = 0L,
                            FamilyName = "کل",
                            Mobile = "09130097415",
                            Name = "مدیر",
                            Password = "OJu2n3t8c+8fdWe7JyerxpIOIeEi8+Ml0NxuGsYRtVD246wp0IHLig==",
                            Salt = "jAqmwqvBIq2PJwGFp1rVOHp0ojhz8myV/6Bxr0FKwblmdVRHJUkWpA==",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.UserDiscount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("From")
                        .HasColumnType("bigint");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.Property<long>("To")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDiscount");
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44fc4a46-6bd7-45d0-a911-b989ed4a944c"),
                            CreatedAt = 1598264161L,
                            RoleId = 2,
                            UserId = new Guid("8114eb2e-3588-4239-98a4-f7e3023674e8")
                        });
                });

            modelBuilder.Entity("Core.Entities.UserTransactionList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTransactionList");
                });

            modelBuilder.Entity("Core.Entities.WorkTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("Date")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsInput")
                        .HasColumnType("bit");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkTime");
                });

            modelBuilder.Entity("Core.Entities.BarginCampaign", b =>
                {
                    b.HasOne("Core.Entities.BarginType", "BarginType")
                        .WithMany("BarginCampaign")
                        .HasForeignKey("BarginTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.GameType", "GameType")
                        .WithMany()
                        .HasForeignKey("GameTypeId");

                    b.HasOne("Core.Entities.EntityStatus", "Status")
                        .WithMany("BarginCampaign")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.BarginUsers", b =>
                {
                    b.HasOne("Core.Entities.BarginCampaign", "BarginCampaign")
                        .WithMany("BarginUsers")
                        .HasForeignKey("BarginCampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("BarginUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Bill", b =>
                {
                    b.HasOne("Core.Entities.User", "Promoter")
                        .WithMany("Promoted")
                        .HasForeignKey("PromoterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.RegisteredTable", null)
                        .WithMany("Bill")
                        .HasForeignKey("RegisteredTableId");

                    b.HasOne("Core.Entities.TableReserve", "TableReserve")
                        .WithMany("Bill")
                        .HasForeignKey("TableReserveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Bill")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.BillGames", b =>
                {
                    b.HasOne("Core.Entities.Bill", "Bill")
                        .WithMany("BillGames")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.GameType", "GameType")
                        .WithMany()
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.BillItem", b =>
                {
                    b.HasOne("Core.Entities.Bill", "Bill")
                        .WithMany("BillItem")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("BillItem")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.City", b =>
                {
                    b.HasOne("Core.Entities.Province", "Province")
                        .WithMany("City")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Device", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Device")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.EventAndLeague", b =>
                {
                    b.HasOne("Core.Entities.GameType", "GameType")
                        .WithMany("EventAndLeague")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EntityStatus", "Status")
                        .WithMany("EventAndLeague")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.EventUsers", b =>
                {
                    b.HasOne("Core.Entities.EventAndLeague", "EventAndLeague")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventAndLeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.GroupGame", b =>
                {
                    b.HasOne("Core.Entities.GameType", "GameType")
                        .WithMany("GroupGame")
                        .HasForeignKey("GameTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EntityStatus", "Status")
                        .WithMany("GroupGame")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.GroupGameUsers", b =>
                {
                    b.HasOne("Core.Entities.GroupGame", "GroupGame")
                        .WithMany("GroupGameUsers")
                        .HasForeignKey("GroupGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("GroupGameUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Message", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("MyMessage")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.User", null)
                        .WithMany("OtherMessage")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Core.Entities.Notification", b =>
                {
                    b.HasOne("Core.Entities.Device", null)
                        .WithMany("Notification")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.HasOne("Core.Entities.Product", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.EntityStatus", "Status")
                        .WithMany("Product")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductImage", b =>
                {
                    b.HasOne("Core.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.ProductRate", b =>
                {
                    b.HasOne("Core.Entities.ProductRate", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("ProductRate")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("ProductRate")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Province", b =>
                {
                    b.HasOne("Core.Entities.Country", "Country")
                        .WithMany("Province")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.RegisteredTable", b =>
                {
                    b.HasOne("Core.Entities.Table", "Table")
                        .WithMany("RegisteredTable")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Entities.RegisteredWorkTime", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("RegisteredWorkTime")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Entities.Slider", b =>
                {
                    b.HasOne("Core.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Table", b =>
                {
                    b.HasOne("Core.Entities.EntityStatus", null)
                        .WithMany("Table")
                        .HasForeignKey("EntityStatusId");
                });

            modelBuilder.Entity("Core.Entities.TableMessage", b =>
                {
                    b.HasOne("Core.Entities.Table", "Table")
                        .WithMany("TableMessage")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.TableReserve", b =>
                {
                    b.HasOne("Core.Entities.EntityStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Table", "Table")
                        .WithMany("TableReserve")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("TableReserve")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Entities.Team", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("MyTeam")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.TeamMember", b =>
                {
                    b.HasOne("Core.Entities.Team", "Team")
                        .WithMany("TeamMember")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("JoindTeam")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.Transaction", b =>
                {
                    b.HasOne("Core.Entities.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId");

                    b.HasOne("Core.Entities.User", "NextUser")
                        .WithMany("OtherTransaction")
                        .HasForeignKey("NextUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.TransactionCategory", "TransactionCategory")
                        .WithMany("Transaction")
                        .HasForeignKey("TransactionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Transaction")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.HasOne("Core.Entities.City", null)
                        .WithMany("User")
                        .HasForeignKey("CityId");

                    b.HasOne("Core.Entities.Document", "ProfileImage")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ProfileImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.User", "Reference")
                        .WithMany()
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.UserDiscount", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("Discount")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.UserRole", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.UserTransactionList", b =>
                {
                    b.HasOne("Core.Entities.User", "Partner")
                        .WithMany("Partner")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserTransactionList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Core.Entities.WorkTime", b =>
                {
                    b.HasOne("Core.Entities.EntityStatus", "Status")
                        .WithMany("WorkTime")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("WorkTime")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
